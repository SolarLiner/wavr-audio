/*
 * Copyright (c) 2020 the Wavr Audio project.
 * This source file, as well as the binaries generated by it,
 * are licensed under MIT.
 */

use gtk::{BoxExt, BuildableExt, ContainerExt, LabelExt, WidgetExt};
use relm::{Component, ContainerWidget, Relm, Update, Widget};
use relm_derive::Msg;

use wavr_meter::WavrMeterData;

use crate::meter::SingleMeter;

mod meter;
pub mod mini;
mod range;

#[derive(Msg, Clone, Debug)]
pub enum Messages {
    Setup(u16),
    Value(WavrMeterData),
}

pub struct WavrMeterWidget {
    root: gtk::Box,
    loudness_label: gtk::Label,
    meters_box: gtk::Box,
    meters: Vec<Component<SingleMeter>>,
}

impl Update for WavrMeterWidget {
    type Model = ();
    type ModelParam = ();
    type Msg = Messages;

    fn model(_: &Relm<Self>, _: Self::ModelParam) -> Self::Model {
        ()
    }

    fn update(&mut self, event: Self::Msg) {
        match event {
            Messages::Setup(channelcount) => {
                for _ in 0..channelcount {
                    self.meters
                        .push(self.meters_box.add_widget::<SingleMeter>(()));
                }
                self.meters_box.show_all();
            }
            Messages::Value(data) => {
                for (i, meter) in self.meters.iter().enumerate() {
                    meter.emit(meter::Messages::Value(
                        data.peak[i].into(),
                        data.loudness.clone(),
                    ));
                }
                let loudness_text = if data.loudness.0 < -120.0 {
                    format!("--.-- LUFS")
                } else {
                    format!("{:2.02} LUFS", data.loudness.0)
                };
                self.loudness_label.set_text(&loudness_text);
            }
        }
    }
}

impl Widget for WavrMeterWidget {
    type Root = gtk::Box;

    fn root(&self) -> Self::Root {
        self.root.clone()
    }

    fn view(_relm: &Relm<Self>, _: Self::Model) -> Self {
        let root = gtk::BoxBuilder::new()
            .orientation(gtk::Orientation::Vertical)
            .spacing(10)
            .hexpand(true)
            .vexpand(true)
            .build();
        let meters_box = gtk::BoxBuilder::new()
            .orientation(gtk::Orientation::Horizontal)
            .spacing(5)
            .hexpand(true)
            .vexpand(true)
            .build();
        let loudness_label = gtk::LabelBuilder::new()
            .halign(gtk::Align::Center)
            .valign(gtk::Align::Baseline)
            .label("--.-- LUFS")
            .build();
        root.pack_start(&loudness_label, false, true, 0);
        root.pack_start(&meters_box, true, true, 0);
        Self {
            root,
            meters_box,
            loudness_label,
            meters: vec![],
        }
    }
}

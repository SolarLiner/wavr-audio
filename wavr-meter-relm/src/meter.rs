/*
 * Copyright (c) 2020 the Wavr Audio project.
 * This source file, as well as the binaries generated by it,
 * are licensed under MIT.
 */

use crate::range::Range;
use gtk::{Inhibit, WidgetExt};
use relm::{connect, Relm, Update, Widget};
use wavr_meter::decibel::{Decibel, LUFS};

pub enum Messages {
    Value(Decibel, LUFS),
}

pub struct SingleMeterModel {
    peak: Decibel,
    loudness: LUFS,
}

pub struct SingleMeter {
    data: Option<SingleMeterModel>,
    range: Range<f64>,
    root: gtk::DrawingArea,
}

impl SingleMeter {
    fn draw(&self, cr: &cairo::Context) -> gtk::Inhibit {
        if let Some(data) = &self.data {
            let width = self.root.get_allocated_width() as f64;
            let height = self.root.get_allocated_height() as f64;
            let peak_pc = self.range.map(data.peak.0);
            let peak = height * peak_pc;
            let peak_inv = height * (1.0 - peak_pc);
            cr.set_source_rgb(0.1, 1.0, 0.5);
            cr.rectangle(0.0, peak_inv, width, peak);
            cr.fill();

            let loudness_pc = self.range.map(data.loudness.0);
            let loudness = height * loudness_pc;
            let loudness_inv = height * (1.0 - loudness_pc);

            cr.set_source_rgba(0.1, 0.5, 1.0, 0.5);
            cr.rectangle(0.0, loudness_inv, width, loudness);
            cr.fill();

            cr.set_source_rgba(0.0, 0.0, 0.0, 0.3);
            cr.set_line_width(1.0);
            for m in (self.range.min as i32)..0 {
                let y = self.range.map(m as f64) * height;
                cr.move_to(0.0, y);
                cr.line_to(width, y);
            }
            cr.stroke();
        }
        Inhibit(false)
    }
}

impl Update for SingleMeter {
    type Model = Option<SingleMeterModel>;
    type ModelParam = ();
    type Msg = Messages;

    fn model(relm: &Relm<Self>, param: Self::ModelParam) -> Self::Model {
        None
    }

    fn update(&mut self, event: Self::Msg) {
        match event {
            Messages::Value(peak, loudness) => {
                self.data = Some(SingleMeterModel { peak, loudness })
            }
        }
    }
}

impl Widget for SingleMeter {
    type Root = gtk::DrawingArea;

    fn root(&self) -> Self::Root {
        self.root.clone()
    }

    fn view(relm: &Relm<Self>, data: Option<SingleMeterModel>) -> Self {
        let root = gtk::DrawingAreaBuilder::new().build();
        root.connect_draw(Self::draw);
        Self {
            data,
            range: Range {
                min: -48.0,
                max: 6.0,
            },
            root,
        }
    }
}

/*
 * Copyright (c) 2020 the Wavr Audio project.
 * This source file, as well as the binaries generated by it,
 * are licensed under MIT.
 */
use iced_native::{
    layout::{Limits, Node},
    window::Backend,
    Background, Color, Element, Hasher, Layout, Length, MouseCursor, Point, Size, Widget,
};
use iced_wgpu::{Defaults, Primitive, Renderer};

use wavr_meter::decibel::{Linear, LUFS};
use wavr_meter::{decibel::Decibel, WavrMeterData};

use crate::core::Range;

pub struct Meter {
    range: Range<f64>,
    peak_data: Decibel,
    loudness_data: LUFS,
}

impl Meter {
    pub fn new(peak: Decibel, loudness: LUFS) -> Self {
        Self {
            range: Range {
                min: -48.0,
                max: 6.0,
            },
            peak_data: peak,
            loudness_data: loudness,
        }
    }
}

impl<Message> Widget<Message, Renderer> for Meter {
    fn width(&self) -> Length {
        Length::Fill
    }

    fn height(&self) -> Length {
        Length::Fill
    }

    fn layout(&self, renderer: &Renderer, limits: &Limits) -> Node {
        limits.min_width(50).min_height(200);
        Node::new(Size::INFINITY)
    }

    fn draw(
        &self,
        renderer: &mut Renderer,
        defaults: &Defaults,
        layout: Layout<'_>,
        cursor_position: Point,
    ) -> (Primitive, MouseCursor) {
        let mut peak_bounds = layout.bounds();
        peak_bounds.height *= self.range.map(self.peak_data.0) as f32;
        let mut loudness_bounds = layout.bounds();
        loudness_bounds.height *= self.range.map(self.loudness_data.0) as f32;

        let primitive = Primitive::Group {
            primitives: vec![
                Primitive::Quad {
                    bounds: peak_bounds,
                    background: Background::Color(Color::BLACK),
                    border_radius: 0,
                    border_color: Color::TRANSPARENT,
                    border_width: 1,
                }, /*,
                   Primitive::Quad {
                       bounds: loudness_bounds,
                       background: Background::Color(Color::BLACK),
                       ..Default::default()
                   },*/
            ],
        };

        (primitive, MouseCursor::OutOfBounds)
    }

    fn hash_layout(&self, state: &mut Hasher) {
        use std::hash::Hash;

        Hash::hash(&(50, 200), state);
    }
}

impl<'a, Message> Into<Element<'a, Message, Renderer>> for Meter {
    fn into(self) -> Element<'a, Message, Renderer> {
        Element::new(self)
    }
}

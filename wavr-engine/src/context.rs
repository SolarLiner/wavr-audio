/*
 * Copyright (c) 2020 the Wavr Audio project.
 * This source file, as well as the binaries generated by it,
 * are licensed under MIT.
 */

use std::time::Duration;

use wavr_audio_buffer::AudioBuffer;

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum AudioContextState {
    Paused,
    Playing,
    Offline,
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub struct AudioContext {
    pub sample_rate: u64,
    pub channel_count: u8,
    pub current_sample: usize,
    pub state: AudioContextState,
}

impl AudioContext {
    pub fn new(sample_rate: u64, channel_count: u8) -> Self {
        Self {
            sample_rate,
            channel_count,
            current_sample: 0,
            state: AudioContextState::Paused,
        }
    }

    pub fn timestamp(&self) -> Duration {
        let seconds = self.current_sample as f64 / self.sample_rate as f64;
        Duration::from_secs_f64(seconds)
    }

    pub fn timestamp_offset(&self, offset: usize) -> Duration {
        let seconds = (self.current_sample + offset) as f64 / self.sample_rate as f64;
        Duration::from_secs_f64(seconds)
    }

    pub fn add_sample_cycle(&mut self, buffer: &AudioBuffer) {
        self.current_sample += buffer.buffer_size();
    }

    pub fn is_playing(&self) -> bool {
        match self.state {
            AudioContextState::Playing | AudioContextState::Offline => true,
            _ => false,
        }
    }
}

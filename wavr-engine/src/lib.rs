/*
 * Copyright (c) 2020 the Wavr Audio project.
 * This source file, as well as the binaries generated by it,
 * are licensed under MIT.
 */
//! # The Wavr Audio Engine
//!
//! This crate covers the audio engine of Wavr Audio. It implements a signal chain consisting of a
//! list of effects in series, provides pefak and loudness monitoring for each effect output, as
//! well as the rack input and output. Effects can be bypassed, and it is planned to support
//! automation.
//!
//! ## Creating the engine
//!
//! ```rust
//! const CHANNELS: u8 = 2;
//! const SAMPLE_RATE: u64 = 48000;
//!
//! let engine = AudioEngine::new(CHANNELS, SAMPLE_RATE);
//! ```
//!
//! ## Implementing an effect
//!
//! ```rust
//! struct Distortion;
//!
//! impl Effect for Distortion {
//!     fn process(&mut self, ctx: &AudioContext, data: &mut AudioBuffer) {
//!         (0..data.channels()).for_each(|i| data.channel_mut(i).transform(|_, s| s.tanh()));
//!     }
//! }
//! ```
//!
//! ## Using an effect
//!
//! ```rust
//! # struct Distortion;
//!
//! # impl Effect for Distortion {
//! #     fn process(&mut self, ctx: &AudioContext, data: &mut AudioBuffer) {
//! #         (0..data.channels()).for_each(|i| data.channel_mut(i).transform(|_, s| s.tanh()));
//! #     }
//! # }
//!
//! # const CHANNELS: u8 = 2;
//! # const SAMPLE_RATE: u64 = 48000;
//!
//! # let mut engine = AudioEngine::new(CHANNELS, SAMPLE_RATE);
//! engine.get_rack_mut().push_effect(Distortion);
//! let mut buffer = vec![0.0; 512*CHANNELS as usize];
//! engine.fill_interleaved(&mut buffer);
//! ```

pub use context::*;
pub use effect::*;
pub use engine::*;
pub use rack::*;
pub use wavr_audio_buffer as buffer;

pub mod context;
pub mod effect;
pub mod engine;
pub mod rack;

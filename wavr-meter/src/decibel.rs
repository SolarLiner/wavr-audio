/*
 * Copyright (c) 2020 the Wavr Audio project.
 * This source file, as well as the binaries generated by it,
 * are licensed under MIT.
 */

use std::fmt;
use std::fmt::{Display, Formatter};
use std::ops::{Add, Mul};

#[derive(Copy, Clone, Debug, PartialOrd, PartialEq)]
pub struct Linear(pub f64);

#[derive(Copy, Clone, Debug, PartialOrd, PartialEq)]
pub struct Decibel(pub f64);

pub type LUFS = Decibel;

impl From<Linear> for Decibel {
    fn from(lin: Linear) -> Self {
        let Linear(val) = lin;
        Decibel(val.log10() * 20.0)
    }
}

impl From<&Linear> for Decibel {
    fn from(Linear(val): &Linear) -> Self {
        Decibel(val.log10() * 20.0)
    }
}

impl Display for Decibel {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        let Decibel(val) = self;
        write!(f, "{:.2} dB", val)
    }
}

impl From<Decibel> for Linear {
    fn from(Decibel(val): Decibel) -> Self {
        Linear((val / 20.0).powf(10.0))
    }
}

impl From<&Decibel> for Linear {
    fn from(Decibel(val): &Decibel) -> Self {
        Linear((val / 20.0).powf(10.0))
    }
}

impl Display for Linear {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        let Linear(val) = self;
        write!(f, "{}", val)
    }
}

impl Add<Self> for Linear {
    type Output = Self;

    fn add(self, Linear(rhs): Linear) -> Self::Output {
        let Linear(lhs) = self;
        Linear(lhs + rhs)
    }
}

impl Add<Decibel> for Linear {
    type Output = Self;

    fn add(self, rhs: Decibel) -> Self::Output {
        let rhs: Linear = rhs.into();
        self + rhs
    }
}

impl Add<f64> for Linear {
    type Output = Linear;

    fn add(self, rhs: f64) -> Self::Output {
        self + Linear(rhs)
    }
}

impl Mul<f64> for Linear {
    type Output = Linear;

    fn mul(self, rhs: f64) -> Self::Output {
        Linear(self.0 * rhs)
    }
}

impl Add<Self> for Decibel {
    type Output = Self;

    fn add(self, rhs: Decibel) -> Self::Output {
        let lhs: Linear = self.into();
        let rhs: Linear = rhs.into();

        (lhs + rhs).into()
    }
}

impl Add<Linear> for Decibel {
    type Output = Self;

    fn add(self, rhs: Linear) -> Self::Output {
        let lhs: Linear = self.into();

        (lhs + rhs).into()
    }
}

impl Add<f64> for Decibel {
    type Output = Decibel;

    fn add(self, rhs: f64) -> Self::Output {
        let lhs: Linear = self.into();
        (lhs + rhs).into()
    }
}

impl Mul<f64> for Decibel {
    type Output = Decibel;

    fn mul(self, rhs: f64) -> Self::Output {
        let lhs: Linear = self.into();
        (lhs + rhs).into()
    }
}
